import { httpClient } from './HttpClient';

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∫–ª–∞—Å—Å–∞
export class HttpClientDemo {
  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è GET –∑–∞–ø—Ä–æ—Å–∞ —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  static async testGetRequest() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å...');

    try {
      // GET –∑–∞–ø—Ä–æ—Å —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const url = httpClient.buildUrl('https://jsonplaceholder.typicode.com/posts', {
        userId: 1,
        _limit: 5
      });

      console.log('URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', url);

      const response = await httpClient.get(url, {
        timeout: 5000,
        headers: {
          'Accept': 'application/json'
        }
      });

      console.log('‚úÖ GET –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', {
        status: response.status,
        dataLength: Array.isArray(response.data) ? response.data.length : 'N/A',
        firstItem: Array.isArray(response.data) ? response.data[0] : response.data
      });

      return response;
    } catch (error) {
      console.error('‚ùå GET –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:', error);
      throw error;
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è POST –∑–∞–ø—Ä–æ—Å–∞
   */
  static async testPostRequest() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST –∑–∞–ø—Ä–æ—Å...');

    try {
      const postData = {
        title: 'Test Post',
        body: 'This is a test post from HttpClient',
        userId: 1
      };

      const response = await httpClient.post(
        'https://jsonplaceholder.typicode.com/posts',
        postData,
        {
          timeout: 5000,
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );

      console.log('‚úÖ POST –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', {
        status: response.status,
        createdPost: response.data
      });

      return response;
    } catch (error) {
      console.error('‚ùå POST –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:', error);
      throw error;
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è PUT –∑–∞–ø—Ä–æ—Å–∞
   */
  static async testPutRequest() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º PUT –∑–∞–ø—Ä–æ—Å...');

    try {
      const updateData = {
        id: 1,
        title: 'Updated Post',
        body: 'This post has been updated',
        userId: 1
      };

      const response = await httpClient.put(
        'https://jsonplaceholder.typicode.com/posts/1',
        updateData,
        {
          timeout: 5000,
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );

      console.log('‚úÖ PUT –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', {
        status: response.status,
        updatedPost: response.data
      });

      return response;
    } catch (error) {
      console.error('‚ùå PUT –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:', error);
      throw error;
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è DELETE –∑–∞–ø—Ä–æ—Å–∞
   */
  static async testDeleteRequest() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º DELETE –∑–∞–ø—Ä–æ—Å...');

    try {
      const response = await httpClient.delete(
        'https://jsonplaceholder.typicode.com/posts/1',
        undefined,
        {
          timeout: 5000
        }
      );

      console.log('‚úÖ DELETE –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω:', {
        status: response.status
      });

      return response;
    } catch (error) {
      console.error('‚ùå DELETE –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è:', error);
      throw error;
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  static async testErrorHandling() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫...');

    try {
      // –ó–∞–ø—Ä–æ—Å –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É API
      await httpClient.get('https://nonexistent-api.example.com/data', {
        timeout: 3000
      });
    } catch (error: any) {
      console.log('‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', {
        message: error.message,
        status: error.status
      });
    }

    try {
      // –ó–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      await httpClient.get('https://httpbin.org/delay/5', {
        timeout: 1000
      });
    } catch (error: any) {
      console.log('‚úÖ –¢–∞–π–º–∞—É—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω:', {
        message: error.message
      });
    }
  }

  /**
   * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
   */
  static async testHeaders() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏...');

    try {
      const response = await httpClient.get('https://httpbin.org/headers', {
        headers: {
          'X-Custom-Header': 'TestValue',
          'User-Agent': 'HttpClient-Demo/1.0'
        }
      });

      console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', {
        status: response.status,
        receivedHeaders: response.data.headers
      });

      return response;
    } catch (error) {
      console.error('‚ùå –¢–µ—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
   */
  static async runAllTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã HTTP –∫–ª–∞—Å—Å–∞...\n');

    try {
      await this.testGetRequest();
      console.log('');

      await this.testPostRequest();
      console.log('');

      await this.testPutRequest();
      console.log('');

      await this.testDeleteRequest();
      console.log('');

      await this.testErrorHandling();
      console.log('');

      await this.testHeaders();
      console.log('');

      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã HTTP –∫–ª–∞—Å—Å–∞ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default HttpClientDemo;
